bool isPalindrome(string s){
    // check half string against other half
    for (int i = 0; i < s.length()/2; i++) {
        if (s[i] != s[s.length()-1-i]) {
            return false;
        }
    }
    // true if only no issues
    return true;
}

int palindromeIndex(string s) {
    // ensure within bounds and isn't already a palindrome
    if (s.length() < 1 || s.length() > 100005 || isPalindrome(s)) {
        return -1;
    }
    
    // check each letter for removal
    for (int i = 0; i < s.length()/2; i++) {
        // see if there's a mismatch
        if (s[i] != s[s.length() - 1 - i]) {
            // get substrings of if either of mismatched are removed
            string sub1 = s.substr(0,i) + s.substr(i+1);
            string sub2 = s.substr(0, (s.length() - 1 -i)) + s.substr(s.length() - i);
            
            // check altered strings
            if (isPalindrome(sub1)) {
                return i;
            }
            if (isPalindrome(sub2)) {
                return s.length() - 1 - i;
            }
            
            // if neither work, would need to remove more than one character
            return -1;
        }
    }
    return -1;
}
